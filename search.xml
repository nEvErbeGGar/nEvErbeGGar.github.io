<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网抑云时间到</title>
      <link href="/2020/07/29/wang-yi-yun-shi-jian-dao/"/>
      <url>/2020/07/29/wang-yi-yun-shi-jian-dao/</url>
      
        <content type="html"><![CDATA[<p>日文歌</p><blockquote><p>生きていたんだよな （她曾活过啊）<br>作曲 : あいみょん<br>作词 : あいみょん</p></blockquote><pre><code>二日前このへんで两天前这里附近飛び降り自殺した人の有人跳楼自杀了ニュースが流れてきた电视里播着这样一则新闻血まみれセーラー满是血迹的水手服濡れ衣センコー被冤枉的老师たちまちここらはネットの餌食短时间内成为了网上的热议「危ないですから「这里很危险離れてください」请大家让开」そのセリフが集合の合図なのにな那句话反而引来无数的围观群众馬鹿騒ぎした奴らが他们炸开了锅似的アホみたいに撮りまくった掏出手机拍下照片冷たいアスファルトに流れる无声的血あの血の何とも言えない流淌在冰冷的沥青上赤さが綺麗で綺麗で那鲜红色是那样美丽泣いてしまったんだ哭泣着泣いてしまったんだ哭泣着何にも知らない在一无所知的ブラウン管の外側で显像管的外侧生きて生きて生きて生きて生きて她活过 她活过 她活过 她活过 她活过生きて生きて生きていたんだよな她活过 她活过 她也曾活过啊最後のサヨナラは他の誰でもなく最后的那声再见不为任何人自分に叫んだんだろう只为了自己而喊彼女が最後に流した涙女孩最后流下的眼泪生きた証の赤い血は是证明她活过的鲜血何も知らない大人たちに最后却在短短的两秒钟之内二秒で拭き取られてしまう就被陌生的大人清理干净了立ち入り禁止の黄色いテープ贴上禁止入内的黄色胶带「ドラマでしかみたことなーい」「听见人们在议论纷纷地说」そんな言葉が飛び交う中で这种情景只在电视上看到过いま彼女はいったい何を而此时此刻这女孩思っているんだろう到底在想着什么呢遠くで遠くで在远方 远方泣きたくなったんだ想要哭泣きたくなったんだ想要哭長いはずの一日がもう暮れる原本漫长的一天却已日暮西山生きて生きて生きて生きて生きて她活过 她活过 她活过 她活过 她活过生きて生きて生きていたんだよな她活过 她活过 她也曾活过啊新しい何かが始まる時当迎来一个新的开始之时消えたくなっちゃうのかな可能只会想让自己消失吧「今ある命を「说什么把握当下精一杯生きなさい」なんて生命要活得精彩」綺麗事だな只是漂亮话罢了精一杯勇気を振り絞って拿出全部的勇气彼女は空を飛んだ她纵身一跃飞过天空鳥になって雲をつかんで成了飞鸟抓住云彩風になって遥遠くへ化为风 飞向远方希望を抱いて飛んだ她怀抱希望纵身一跃生きて生きて生きて生きて生きて她活过 她活过 她活过 她活过 她活过生きて生きて生きていたんだよな她活过 她活过 她也曾活过啊新しい何かが始まる時当迎来一个新的开始之时消えたくなっちゃうのかな可能只会想让自己消失吧生きて生きて生きて生きて生きて她活过 她活过 她活过 她活过 她活过生きて生きて生きていたんだよな她活过 她活过 她也曾活过啊最後のサヨナラは最后的那声再见他の誰でもなく不为任何人自分に叫んだんだろう只为了自己而喊サヨナラサヨナラ再见 永别了</code></pre><blockquote><p>Lemon<br>作曲 : 米津玄師<br>作词 : 米津玄師</p></blockquote><pre><code>夢ならばどれほどよかったでしょう如果这一切都是梦境该有多好未だにあなたのことを夢にみる至今仍能与你在梦中相遇忘れた物を取りに帰るように如同取回遗忘之物一般古びた思い出の埃を払う细细拂去将回忆覆盖的尘埃戻らない幸せがあることを最终是你让我懂得了最後にあなたが教えてくれた这世间亦有无法挽回的幸福言えずに隠してた昏い過去も那些未对他人提及过的黑暗往事あなたがいなきゃ永遠に昏いまま如果不曾有你的话 它们将永远沉睡在黑暗中きっともうこれ以上 傷つくことなど我知道这世上一定没有ありはしないとわかっている比这更令人难过的事情了あの日の悲しみさえ那日的悲伤あの日の苦しみさえ与那日的痛苦そのすべてを愛してた あなたとともに连同深爱着这一切的你胸に残り離れない化作了深深烙印在我心中的苦いレモンの匂い苦涩柠檬的香气雨が降り止むまでは帰れない在雨过天晴前都无法归去今でもあなたはわたしの光时至今日 你仍是我的光芒暗闇であなたの背をなぞった在黑暗中追寻着你的身影その輪郭を鮮明に覚えている那轮廓至今仍鲜明地刻印于心受け止めきれないものと出会うたび每当遇到无法承受的苦痛时溢れてやまないのは涙だけ总是不禁泪如泉涌何をしていたの你都经历过什么何を見ていたの又目睹过什么呢わたしの知らない横顔で脸上浮现着我不曾见过的神情どこかであなたが今如果你正在什么地方わたしと同じ様な与我一样涙にくれ 淋しさの中にいるなら终日过着以泪洗面的寂寞生活的话わたしのことなどどうか 忘れてください就请你将我的一切全部遗忘吧そんなことを心から願うほどに这是我发自内心深处唯一的祈愿今でもあなたはわたしの光时至今日 你仍是我的光芒自分が思うより 恋をしていたあなたに我深深地恋慕着你 甚至超出了我自己的想象あれから思うように 息ができない自此每当想起你 都如同窒息般痛苦あんなに側にいたのにまるで嘘みたい你曾亲密伴我身旁 如今却如烟云般消散とても忘れられないそれだけが確か唯一能确定的是 我永远都不会将你遗忘あの日の悲しみさえ那日的悲伤あの日の苦しみさえ与那日的痛苦その全てを愛してたあなたと共に连同深爱着这一切的你胸に残り離れない化作了深深烙印在我心中的苦いレモンの匂い苦涩柠檬的香气雨が降り止むまでは帰れない在雨过天晴前都无法归去切り分けた果実の片方の様に如同被切开的半个柠檬一般今でもあなたはわたしの光时至今日 你仍是我的光芒</code></pre><blockquote><p>僕が死のうと思ったのは（曾经我也想过一了百了）<br>作曲 : 秋田ひろむ<br>作词 : 秋田ひろむ</p></blockquote><pre><code>僕が死のうと思ったのは我曾经想死ウミネコが桟橋で鳴いたから因为有海猫在码头悲鸣波の随意に浮かんで消える随着浪花起伏消没過去も啄ばんで飛んでいけ叼啄着往昔飞离不见僕が死のうと思ったのは我曾经想死誕生日に杏の花が咲いたから因为生日那天杏花盛开その木漏れ日でうたた寝したら若在这日照下酣睡虫の死骸と土になれるかな能像虫腐化为泥土吗薄荷飴 漁港の灯台薄荷糖 渔港的灯塔錆びたアーチ橋 捨てた自転車生锈的拱桥 丢弃的自行车木造の駅のストーブの前で木造车站的站台前どこにも旅立てない心无处可前往的心灵今日はまるで昨日みたいだ今天与昨天如此相像明日を変えるなら今日を変えなきゃ想改变明天必须改变今天分かってる我知道分かってるけれど我知道 但是...僕が死のうと思ったのは我曾经想死心が空っぽになったから因为心中无一牵挂満たされないと泣いているのは心空虚而哭泣きっと満たされたいと願うから一定是渴望得到充实僕が死のうと思ったのは我曾经想死靴紐が解けたから因为鞋带已然松脱結びなおすのは苦手なんだよ系不紧的鞋结人との繋がりもまた然り如同系不紧人的羁绊僕が死のうと思ったのは我曾经想死少年が僕を見つめていたから因为少年深情凝视着我ベッドの上で土下座してるよ抱膝跪在床上あの日の僕にごめんなさいと对那天的我自己感到抱歉パソコンの薄明かり屏幕微光上階の部屋の生活音楼上的嘈杂インターフォンのチャイムの音来电的铃音耳を塞ぐ鳥かごの少年紧塞住双耳鸟笼中的少年見えない敵と戦ってる与无法看見的宿敌对战六畳一間のドンキホーテ叠一间的堂吉轲德ゴールはどうせ醜いものさ目的也是肮脏丑陋僕が死のうと思ったのは我曾经想死冷たい人と言われたから因为被人说是冷血愛されたいと泣いているのは被爱着而哭泣人の温もりを知ってしまったから因为知道了人的温暖僕が死のうと思ったのは我曾经想死あなたが綺麗に笑うから因为有你灿烂的笑容死ぬことばかり考えてしまうのは之所以思考死亡きっと生きる事に真面目すぎるから一定是坦率努力活着吧僕が死のうと思ったのは我曾经想死まだあなたに出会ってなかったから因为还没与你邂逅あなたのような人が生まれた因为有像你这样的人诞生世界を少し好きになったよ我对世界稍微有了好感あなたのような人が生きてる因为有像你这样的人诞生世界に少し期待するよ我对世界稍微有了期待</code></pre><h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 歌词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微博爬虫</title>
      <link href="/2020/07/29/wei-bo-pa-chong/"/>
      <url>/2020/07/29/wei-bo-pa-chong/</url>
      
        <content type="html"><![CDATA[<p>本篇博文是有关于微博的爬虫练习</p><blockquote><p> 正则表达式</p></blockquote><pre><code>import requestsfrom requests import RequestExceptionimport reimport jsonimport timedef get_one_page(url):    try:        headers = {        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36'}        res = requests.get(url, headers=headers)        if res.status_code == 200:        return res.text        else:            return None    except RequestException:        print("请求错误")def jx(text):        restr = re.compile(    '&lt;tr class=""&gt;\n.*ranktop"&gt;(\d+)&lt;\/td&gt;\n.*\n.*&gt;(.*?)&lt;\/a&gt;\n.*&lt;span&gt;(\d+)&lt;\/span&gt;')        result = re.findall(restr, text)        for item in result:            yield {                'index': item[0],                'story': item[1],                'hot': item[2]                }def main():url = 'https://s.weibo.com/top/summary?cate=realtimehot'html = get_one_page(url)for item in jx(html):    print(item)    write(item)def write(content):    with open('weibo.txt', 'a', encoding='utf-8') as f:       f.write(json.dumps(content, ensure_ascii=False) + '\n')    f.close()if __name__ == '__main__':       main()</code></pre><blockquote><p>BeautifulSoup</p></blockquote><pre><code>import jsonimport requestsfrom requests import RequestExceptionfrom bs4 import BeautifulSoupdef getHTMLText(url):    try:        headers = {            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36'}        res = requests.get(url, headers=headers)        if res.status_code == 200:            return res.text        else:            return None    except RequestException:        print("请求错误")def fillUnivList(ulist, html):    # 用bs4解析    soup = BeautifulSoup(html, "html.parser")    # 找到所有的&lt;tr&gt;节点，属性为***，返回一个列表    trs = soup.find_all('tr', class_="")[1:]    for tr in trs:        # 对于列表中每一个元素，仍可以调用find_all方法        rank = tr.find_all('td', class_="td-01 ranktop")[0].string        story = tr.find_all('a')[0].string        hot = tr.find_all('span')[0].string        sina = {            'rank': rank,            'story': story,            'hot': hot        }        ulist.append(sina)def write(list1):    with open('bs4weibo.txt', 'a', encoding='utf-8') as f:        f.write(json.dumps(list1, ensure_ascii=False) + '\n')    f.close()def main():    uinfo = []    url = 'https://s.weibo.com/top/summary?cate=realtimehot'    html = getHTMLText(url)    fillUnivList(uinfo, html)    for uinf in uinfo:        write(uinf)main()</code></pre><blockquote><p>PyQuery</p></blockquote><pre><code>import jsonimport requestsfrom requests import RequestExceptionfrom pyquery import PyQuery as pqimport csvdef getHTMLText(url):    try:        headers = {            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36'}        res = requests.get(url, headers=headers)        if res.status_code == 200:            return res.text        else:            return None    except RequestException:        print("请求错误")def write(list1):    # 以utf-8_sig的方式编码，让文件用excel打开的时候中文不会出现乱码。    with open('pqweibo.csv', 'w', encoding='utf-8_sig') as f:        file = csv.writer(f, delimiter='\n')        file.writerow(list1)    f.close()def main():    uinfo = []    url = 'https://s.weibo.com/top/summary?cate=realtimehot'    html = getHTMLText(url)    # 用pyquery的方式解析    doc = pq(html)    # 查找里面的&lt;tr&gt;标签，使用item()方法，生成一个迭代对象。    trs = doc('tr').items()    a = doc('a')    for tr in trs:        # children()方法找到使用者的直接子节点，text()方法输出内容，find()找到所有符合的子孙节点。    属性的查找还没有掌握        rank = tr.children('.td-01').text()        story = tr.find('a').text()        hot = tr.find('span').text()        weibo = {            'rank': rank,            'story': story,            'hot': hot,        }        uinfo.append(weibo)    write(uinfo)main()</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Python </tag>
            
            <tag> 微博 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>520快乐</title>
      <link href="/2020/05/20/520/"/>
      <url>/2020/05/20/520/</url>
      
        <content type="html"><![CDATA[<h3 id="过的第一个520"><a href="#过的第一个520" class="headerlink" title="过的第一个520"></a>过的第一个520</h3><p>必须纪念一下</p><h3 id="展示一下我家小可爱做的海报"><a href="#展示一下我家小可爱做的海报" class="headerlink" title="展示一下我家小可爱做的海报"></a>展示一下我家小可爱做的海报</h3><p>我很开心</p><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://tj-download-ipv6.ftn.qq.com/ftn_handler/c1ecdba66972dbf909713703be45f2d0811c79de6d561cfdc94329fc0d8b52e602aa66bea15c2b46663a7a3a0195bfc77dc01e07c9dde7437debc32599a3418f/?fname=*.jpg&amp;pictype=scaled&amp;size=1024*768" alt="我家娇娇最棒"></p><h2 id="我们要一直在一起"><a href="#我们要一直在一起" class="headerlink" title="我们要一直在一起"></a><strong>我们要一直在一起</strong></h2><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> girlfriend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫学习笔记</title>
      <link href="/2020/04/03/pa-chong-xue-xi-bi-ji/"/>
      <url>/2020/04/03/pa-chong-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫笔记"><a href="#爬虫笔记" class="headerlink" title="爬虫笔记"></a>爬虫笔记</h1><p>疫情期间，由于长期不出门，除了平时的课业之外便有了大量的时间。在此期间，我对网络爬虫产生了兴趣。写下此博客记录学习过程，作为日后的资料，也让更多的人监督，一起学习、共同进步。也希望对看到博客的你学习爬虫有所帮助！</p><hr><h3 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h3><hr><p>网络爬虫就是一段程序，它模拟人类访问互联网的形式，不停地从网络上抓取我们需要的数据。我们可以定制各种各样的爬虫，来满足不同的需求，如果法律允许，你可以采集在网页上看到的、任何你想要获得的数据。</p><h3 id="为什么要学习爬虫"><a href="#为什么要学习爬虫" class="headerlink" title="为什么要学习爬虫"></a>为什么要学习爬虫</h3><hr><p>如果你是学生的话，学习爬虫对于今后的毕业论文数据的收集、比赛竞赛都有一定帮助。对于以后的工作也能起到一定的作用。爬虫也有很多实际的用处，如搜索引擎、采集数据、广告过滤等，Python爬虫还可以用于数据分析，在数据的抓取方面作用巨大！</p><h3 id="爬虫学习的大体步骤"><a href="#爬虫学习的大体步骤" class="headerlink" title="爬虫学习的大体步骤"></a>爬虫学习的大体步骤</h3><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github</title>
      <link href="/2020/02/23/blog-open-source/"/>
      <url>/2020/02/23/blog-open-source/</url>
      
        <content type="html"><![CDATA[<h1 id="简短介绍"><a href="#简短介绍" class="headerlink" title="简短介绍"></a>简短介绍</h1><p>搭建过程其实很简单，在我设置自己喜欢的主题时却费了九牛二虎之力（泪）。</p><hr><p>Hexo搭建步骤<br>1.安装Git<br>2.安装Node.js<br>3.安装Hexo<br>4.GitHub创建个人仓库<br>5.生成SSH添加到GitHub<br>6.将Hexo部署到GitHub<br>7.设置个人域名<br>8.发布文章</p><hr><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><hr><p>安装Git和Node.js是很简单的不再叙述。<br>安装Hexo<br>1.新建一个文件夹，用来存放博客相关内容<br>鼠标右键点击<em>Git Bash Here</em><br>2.在命令窗口中输入以下命令<br>第一条   这是安装hexo的基础框架<br><code>npm install -g hexo</code></p><p>第二条   这是初始化hexo框架 这个可能会比较慢<br><code>hexo init</code></p><p>第三条 安装所需要的组件<br><code>npm install</code><br>第四条 编译生成静态页面<br><code>hexo g</code></p><p>第五条 启动本地服务<br><code>hexo s</code><br>这时候你可以在本地看到你的博客了<br>3.将Hexo部署到GitHub<br>打开博客根目录下的<em>_config.yml</em>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。</p><p>修改最后一行的配置：<br><code>deploy:  type: git  repository:   branch: master</code><br><em>repository</em>修改为你自己的<em>Github</em>项目地址即可。<br>（此处一定要注意<code>：</code>后面有一个空格）</p><p>安装<em>deploy-git</em> ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><p><code>npm install hexo-deployer-git --save</code><br>然后<br><code>hexo clean</code><br><code>hexo generate</code><br><code>hexo deploy</code></p><p>部署成功之后就可以在<a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io </a>  看到你的博客了。<br>youname是你的Github用户名。</p><h2 id="个人域名"><a href="#个人域名" class="headerlink" title="个人域名"></a>个人域名</h2><hr><p>这个东西可有可无。我是在米特网注册申请了一个免费域名<a href="http://yasheng.cr.cx" target="_blank" rel="noopener">http://yasheng.cr.cx</a><br>你也可以在其他地方购买自己喜欢的域名。</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><hr><p>首先在博客根目录下右键打开<em>git bash</em>，安装一个扩展<code>npm i hexo-deployer-git</code>。然后输入<code>hexo new post</code> “<code>post（这里是你的文章标题）</code>“，新建一篇文章。</p><p>打开<em>source_posts*的目录，可以发现下面多了一个文件夹和一个</em>.md*文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d上</code>传到Github上。这时打开你的github.io主页就能看到发布的文章啦。</p><p>到此为止你已经拥有一个自己的博客了，后续你可以自己更换自己的博客主题。在Github上搜索Hexo theme选择自己喜欢的就可以了。当然你也可以自行设计、调整博客页面样式了。</p><table>  <tbody><tr>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://ae01.alicdn.com/kf/Ha045c82f4dc645c9b0a6352c51a05f60e.jpg"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://ae01.alicdn.com/kf/H682f5c09204e41cc8e6e7fc9ab3c97e1e.png"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://ae01.alicdn.com/kf/H0289bb265fd644b784f9e4a8869a6008j.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
